/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/client/js/map.js":
/*!******************************!*\
  !*** ./src/client/js/map.js ***!
  \******************************/
/***/ (() => {

eval("var markers = [];\nvar mapContainer = document.getElementById('map'),\n    // 지도를 표시할 div \nmapOption = {\n  center: new kakao.maps.LatLng(37.566826, 126.9786567),\n  // 지도의 중심좌표\n  level: 3 // 지도의 확대 레벨\n\n}; // 지도를 생성합니다    \n\nvar map = new kakao.maps.Map(mapContainer, mapOption); // 장소 검색 객체를 생성합니다\n\nvar ps = new kakao.maps.services.Places(); // 검색 결과 목록이나 마커를 클릭했을 때 장소명을 표출할 인포윈도우를 생성합니다\n\nvar infowindow = new kakao.maps.InfoWindow({\n  zIndex: 1\n});\nvar searchbtn = document.querySelector(\".search\");\nvar keyword = document.getElementById(\"keyword\").value;\n\nfunction init() {\n  if (keyword) {\n    searchbtn.addEventListener(\"click\", searchPlaces);\n  }\n}\n\ninit(); // 키워드 검색을 요청하는 함수입니다\n\nfunction searchPlaces() {\n  var keyword = document.getElementById(\"keyword\").value;\n\n  if (!keyword.replace(/^\\s+|\\s+$/g, '')) {\n    alert('키워드를 입력해주세요!');\n    return false;\n  } // 장소검색 객체를 통해 키워드로 장소검색을 요청합니다\n\n\n  ps.keywordSearch(keyword, placesSearchCB);\n} // 장소검색이 완료됐을 때 호출되는 콜백함수 입니다\n\n\nfunction placesSearchCB(data, status, pagination) {\n  if (status === kakao.maps.services.Status.OK) {\n    // 정상적으로 검색이 완료됐으면\n    // 검색 목록과 마커를 표출합니다\n    displayPlaces(data); // 페이지 번호를 표출합니다\n\n    displayPagination(pagination);\n  } else if (status === kakao.maps.services.Status.ZERO_RESULT) {\n    displayPlaces(0);\n    return false;\n  } else if (status === kakao.maps.services.Status.ERROR) {\n    displayPlaces(0);\n    return false;\n  }\n} // 검색 결과 목록과 마커를 표출하는 함수입니다\n\n\nvar displayPlaces = function displayPlaces(places) {\n  var listEl = document.getElementById('placesList'),\n      menuEl = document.getElementById('menu_wrap'),\n      fragment = document.createDocumentFragment(),\n      bounds = new kakao.maps.LatLngBounds(),\n      listStr = ''; // 검색 결과 목록에 추가된 항목들을 제거합니다\n\n  removeAllChildNods(listEl); // 지도에 표시되고 있는 마커를 제거합니다\n\n  removeMarker();\n\n  var _loop = function _loop(i) {\n    // 마커를 생성하고 지도에 표시합니다\n    var placePosition = new kakao.maps.LatLng(places[i].y, places[i].x),\n        marker = addMarker(placePosition, i),\n        itemEl = getListItem(i, places[i]); // 검색 결과 항목 Element를 생성합니다\n    // 검색된 장소 위치를 기준으로 지도 범위를 재설정하기위해\n    // LatLngBounds 객체에 좌표를 추가합니다\n\n    bounds.extend(placePosition); // 마커와 검색결과 항목에 mouseover 했을때\n    // 해당 장소에 인포윈도우에 장소명을 표시합니다\n    // mouseout 했을 때는 인포윈도우를 닫습니다\n\n    (function (marker, title) {\n      kakao.maps.event.addListener(marker, 'mouseover', function () {\n        displayInfowindow(marker, title);\n      });\n      kakao.maps.event.addListener(marker, 'mouseout', function () {\n        infowindow.close();\n      });\n\n      itemEl.onmouseover = function () {\n        displayInfowindow(marker, title);\n      };\n\n      itemEl.onmouseout = function () {\n        infowindow.close();\n      };\n    })(marker, places[i].place_name);\n\n    fragment.appendChild(itemEl);\n  };\n\n  for (var i = 0; i < places.length; i++) {\n    _loop(i);\n  } // 검색결과 항목들을 검색결과 목록 Element에 추가합니다\n\n\n  listEl.appendChild(fragment);\n  menuEl.scrollTop = 0; // 검색된 장소 위치를 기준으로 지도 범위를 재설정합니다\n\n  map.setBounds(bounds);\n}; // 검색결과 항목을 Element로 반환하는 함수입니다\n\n\nvar getListItem = function getListItem(index, places) {\n  var el = document.createElement('li'),\n      itemStr = '<span class=\"markerbg marker_' + (index + 1) + '\"></span>' + '<div class=\"info\">' + '   <h5>' + places.place_name + '</h5>';\n\n  if (places.road_address_name) {\n    itemStr += '    <span>' + places.road_address_name + '</span>' + '   <span class=\"jibun gray\">' + places.address_name + '</span>';\n  } else {\n    itemStr += '    <span>' + places.address_name + '</span>';\n  }\n\n  itemStr += '  <span class=\"tel\">' + places.phone + '</span>' + '</div>';\n  el.innerHTML = itemStr;\n  el.className = 'item';\n  return el;\n}; // 마커를 생성하고 지도 위에 마커를 표시하는 함수입니다\n\n\nvar addMarker = function addMarker(position, idx, title) {\n  var imageSrc = 'https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/marker_number_blue.png',\n      // 마커 이미지 url, 스프라이트 이미지를 씁니다\n  imageSize = new kakao.maps.Size(36, 37),\n      // 마커 이미지의 크기\n  imgOptions = {\n    spriteSize: new kakao.maps.Size(36, 691),\n    // 스프라이트 이미지의 크기\n    spriteOrigin: new kakao.maps.Point(0, idx * 46 + 10),\n    // 스프라이트 이미지 중 사용할 영역의 좌상단 좌표\n    offset: new kakao.maps.Point(13, 37) // 마커 좌표에 일치시킬 이미지 내에서의 좌표\n\n  },\n      markerImage = new kakao.maps.MarkerImage(imageSrc, imageSize, imgOptions),\n      marker = new kakao.maps.Marker({\n    position: position,\n    // 마커의 위치\n    image: markerImage\n  });\n  marker.setMap(map); // 지도 위에 마커를 표출합니다\n\n  markers.push(marker); // 배열에 생성된 마커를 추가합니다\n\n  return marker;\n}; // 지도 위에 표시되고 있는 마커를 모두 제거합니다\n\n\nvar removeMarker = function removeMarker() {\n  for (var i = 0; i < markers.length; i++) {\n    markers[i].setMap(null);\n  }\n\n  markers = [];\n}; // 검색결과 목록 하단에 페이지번호를 표시는 함수입니다\n\n\nvar displayPagination = function displayPagination(pagination) {\n  var paginationEl = document.getElementById('pagination'),\n      fragment = document.createDocumentFragment(),\n      i; // 기존에 추가된 페이지번호를 삭제합니다\n\n  while (paginationEl.hasChildNodes()) {\n    paginationEl.removeChild(paginationEl.lastChild);\n  }\n\n  for (var _i = 1; _i <= pagination.last; _i++) {\n    var el = document.createElement('a');\n    el.href = \"#\";\n    el.innerHTML = _i;\n\n    if (_i === pagination.current) {\n      el.className = 'on';\n    } else {\n      el.onclick = function (i) {\n        return function () {\n          pagination.gotoPage(i);\n        };\n      }(_i);\n    }\n\n    fragment.appendChild(el);\n  }\n\n  paginationEl.appendChild(fragment);\n}; // 검색결과 목록 또는 마커를 클릭했을 때 호출되는 함수입니다\n// 인포윈도우에 장소명을 표시합니다\n\n\nvar displayInfowindow = function displayInfowindow(marker, title) {\n  var content = '<div style=\"padding:5px;z-index:1;\">' + title + '</div>';\n  infowindow.setContent(content);\n  infowindow.open(map, marker);\n}; // 검색결과 목록의 자식 Element를 제거하는 함수입니다\n\n\nvar removeAllChildNods = function removeAllChildNods(el) {\n  while (el.hasChildNodes()) {\n    el.removeChild(el.lastChild);\n  }\n};\n\n//# sourceURL=webpack://installer/./src/client/js/map.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/client/js/map.js"]();
/******/ 	
/******/ })()
;